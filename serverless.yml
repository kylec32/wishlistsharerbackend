service:
  name: eventSourceSystem

plugins:
  - serverless-webpack
  - serverless-offline

package:
  include:
    - key.public
  exclude:
    - secrets.*.yml

provider:
  name: aws
  runtime: nodejs8.10
  timeout: 10
  memorySize: 128
  environment: 
    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}
    IOPIPE_TRACE_AUTO_HTTP_ENABLED: true
    CAPTCHA_SECRET: ${env:CAPTCHA_SECRET}
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "dynamodb:Scan"
         - "dynamodb:PutItem"
         - "dynamodb:UpdateItem"
         - "dynamodb:GetItem"
         - "dynamodb:DescribeStream"
         - "dynamodb:GetRecords"
         - "dynamodb:GetShardIterator"
         - "dynamodb:ListStreams"
       Resource:
        - Fn::GetAtt:
          - eventsTable
          - Arn
        - Fn::GetAtt:
          - userTable
          - Arn
    -  Effect: "Allow"
       Action:
         - "SNS:Publish"
       Resource:
        Fn::Join:
          - ""
          - - "arn:aws:sns:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":eventsTopic"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - arn:aws:lambda:us-east-1:927245588110:function:eventSourceSystem-dev-handleConnectUsers2


functions:
  authorizer:
    handler: user-management.authorizer
  presistEvent:
    handler: eventHandler.persistEvent
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":eventsTopic"
          topicName: eventsTopic
  signUp:
    handler: user-management.signUp
    events:
      - http:
          method: post
          path: sign-up
          cors: true
  signIn:
    handler: user-management.signIn
    events:
      - http:
          method: post
          path: sign-in
          cors: true
  followNew:
    handler: connectionHandler.addNew
    events:
      - http:
          method: post
          path: /connections/{identifier}
          request:
            parameters:
              paths:
                identifier: true
          cors: true
          authorizer: authorizer
  handleConnectUsers:
    handler: connectionHandler.handleConnectUsers
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  handleConnectUsers2:
    handler: connectionHandler.handleConnectUsers2
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-east-1:927245588110:table/eventsTable/stream/2018-08-31T02:59:58.354
  eventProcess:
    handler: EventProcessor.verify
    events:
      - http:
          method: post
          path: /event-processor
          cors: true
  getFollowers:
    handler: connectionHandler.getConnections
    events:
      - http:
          method: get
          path: /connections
          cors: true
          authorizer: authorizer
  deleteConnection:
    handler: connectionHandler.deleteConnection
    events:
      - http:
          method: delete
          path: /connections/{identifier}
          request:
            parameters:
              paths:
                identifier: true
          cors: true
          authorizer: authorizer
  handleDisconnectUser:
    handler: connectionHandler.handleDisconnectUser
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  verify:
    handler: user-management.verify
    events:
      - http:
          method: post
          path: verify
  handleSignUpEvent:
    handler: user-management.handleSignUpEvent
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  addPresent:
    handler: presentHandler.addNew
    events:
      - http:
          method: post
          path: /my/presents
          cors: true
          authorizer: authorizer
  handleAddPresent:
    handler: presentHandler.handleAddNew
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  getUserPresents:
    handler: presentHandler.getUserPresents
    events:
      - http:
          method: get
          path: /my/presents
          cors: true
          authorizer: authorizer
  updatePresent:
    handler: presentHandler.update
    events:
      - http:
          method: put
          path: /my/presents/{presentId}
          request:
            parameters:
              paths:
                presentId: true
          cors: true
          authorizer: authorizer
  handleUpdatePresent:
    handler: presentHandler.handleUpdate
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  deletePresent:
    handler: presentHandler.deletePresent
    events:
      - http:
          method: delete
          path: /my/presents/{presentId}
          request:
            parameters:
              paths:
                presentId: true
          cors: true
          authorizer: authorizer
  markPresentAsPurchased:
    handler: presentHandler.markAsPurchased
    events:
      - http:
          method: put
          path: /presents/{userId}/{presentId}/purchased
          request:
            parameters:
              paths:
                userId: true
                presentId: true
          cors: true
          authorizer: authorizer
  handleMarkPresentAsPurchased:
    handler: presentHandler.handleMarkAsPurchased
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  unmarkPresentAsPurchased:
    handler: presentHandler.unmarkAsPurchased
    events:
      - http:
          method: delete
          path: /presents/{userId}/{presentId}/purchased
          request:
            parameters:
              paths:
                userId: true
                presentId: true
          cors: true
          authorizer: authorizer
  handleUnmarkPresentAsPurchased:
    handler: presentHandler.handleUnmarkAsPurchased
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  handleDeletePresent:
    handler: presentHandler.handleDeletePresent
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventsTable
              - StreamArn
  getFollowedPresents:
    handler: followedPresentHandler.getPresents
    events:
      - http:
          method: get
          path: /presents
          cors: true
          authorizer: authorizer




resources:  # CloudFormation template syntax
  Resources:
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: eventsTable
        AttributeDefinitions:
          - AttributeName: event_id
            AttributeType: N
        KeySchema:
          - AttributeName: event_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable
        AttributeDefinitions:
          - AttributeName: user_name
            AttributeType: S
        KeySchema:
          - AttributeName: user_name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    eventTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "eventsTopic"
